Assumption : We have created Scott schema (database) in MySQL and created following tables using attached script
EMP
DEPT
SALGRADE
BONUS

Questions on SELECT Clause
----------------------------------------
1. Display all the records in emp table

=> select * from emp;

2. Display first two column from emp table

=> select empid, ename from emp table;

3. Display the structure of emp, dept and salgrade table

=> desc emp;
	desc salgrade;
	desc dept;
	
4. Display unique jobs from employee table

=>  select distinct jobs from emp;

5. Display the output as follows 
          SCOTT is earning 800 dollars
          ...
		  
=>   select upper(ename), ' is earning ', salary, ' dollars' from emp;

6. Display the output from employee table in following format

 Employee Name  Designation 
-----------------------   ---------------------
 SMITH                 CLERK
 ALLEN                 SALESMAN
...

=>  select ename as 'Employee Name', desg as Designation from emp;


7. Display the name of employee and annual salary of each employee. Annual sal must be calculated by considering sal, comm and 
   bonus of 1000$ for each employee
   
=>  select ename, (sal+comm+1000) as Salary from emp; 

8. Display the list of manager's employee number in following format. Ensure that same manager number must not be repeated. 
   Also ensure that NULL must not be displayed in the result (display NA in place of null)

Manager Number
------------------------
7902
7698
7839
7566

=>  select distinct ifnull('Manager Number', NA) from emp;

9. Display the employee name, salary and commission and ensure that we consider the commission as 1500 for employees where 
   commission is not paid.
   
=> select ename, salary, ifnull(comm, 1500) from emp;

Questions on WHERE Clause
----------------------------------------
1. List the employees who are working in department 10

=> select * from emp where department = 10;

2. List the name and salary of employees who are working as CLERK and SALESMAN

=>  select ename, salary from emp where dept = 'clerk' or dept = 'salesman';

3. List the name of employees who have joined the company after year 1981

=>  select ename from emp where join_year > 1981;

4. List the name of employees who have joined the company in year 1981

=>  select ename from emp where join_year = 1981;

5. List the details of employees who are working as CLERK and earning more then 1000$

=>  select * from emp where department = 'clerk' and salary > '1000';

6. List the details of employees who are not managed by any manager

=>  select * from emp where manager = null;

7. List the name of employees who are not earning any commission

=>  select * from emp where comm = null;

8. List the details of employees whose total salary (sal and commission) is more then $2000.

=> select * from emp where (salary + ifnull(comm, 0)) > 2000;

9. List the details of employees which are working as SALESMAN in department 10 and 30.

=>  select * from emp where department = 'salesman' and (dept ='10' or dept = '30'); 

10. List details of employees who are working as SALESMAN in department 30 and earning some commission

=>  select * from emp where department = 'salesman' and dept = 30 and comm != null;



Questions on Information schema
---------------------------------------------
1. Identify and query the data dictionaries which can provide following details
      - List of tables in scott schema
	  
	  =>  show table;
	  
      - List of columns and correspondings data types of all the tables in scott schema
	  
	  =>  desc tableName;
	  
2. Fetch list of all data dictionary in information schema and observe there naming convention

=>  mysql> show tables;
+---------------------------------------+
| Tables_in_information_schema          |
+---------------------------------------+
| ADMINISTRABLE_ROLE_AUTHORIZATIONS     |
| APPLICABLE_ROLES                      |
| CHARACTER_SETS                        |
| CHECK_CONSTRAINTS                     |
| COLLATION_CHARACTER_SET_APPLICABILITY |
| COLLATIONS                            |
| COLUMN_PRIVILEGES                     |
| COLUMN_STATISTICS                     |
| COLUMNS                               |
| ENABLED_ROLES                         |
| ENGINES                               |
| EVENTS                                |
| FILES                                 |
| INNODB_BUFFER_PAGE                    |
| INNODB_BUFFER_PAGE_LRU                |
| INNODB_BUFFER_POOL_STATS              |
| INNODB_CACHED_INDEXES                 |
| INNODB_CMP                            |
| INNODB_CMP_PER_INDEX                  |
| INNODB_CMP_PER_INDEX_RESET            |
| INNODB_CMP_RESET                      |
| INNODB_CMPMEM                         |
| INNODB_CMPMEM_RESET                   |
| INNODB_COLUMNS                        |
| INNODB_DATAFILES                      |
| INNODB_FIELDS                         |
| INNODB_FOREIGN                        |
| INNODB_FOREIGN_COLS                   |
| INNODB_FT_BEING_DELETED               |
| INNODB_FT_CONFIG                      |
| INNODB_FT_DEFAULT_STOPWORD            |
| INNODB_FT_DELETED                     |
| INNODB_FT_INDEX_CACHE                 |
| INNODB_FT_INDEX_TABLE                 |
| INNODB_INDEXES                        |
| INNODB_METRICS                        |
| INNODB_SESSION_TEMP_TABLESPACES       |
| INNODB_TABLES                         |
| INNODB_TABLESPACES                    |
| INNODB_TABLESPACES_BRIEF              |
| INNODB_TABLESTATS                     |
| INNODB_TEMP_TABLE_INFO                |
| INNODB_TRX                            |
| INNODB_VIRTUAL                        |
| KEY_COLUMN_USAGE                      |
| KEYWORDS                              |
| OPTIMIZER_TRACE                       |
| PARAMETERS                            |
| PARTITIONS                            |
| PLUGINS                               |
| PROCESSLIST                           |
| PROFILING                             |
| REFERENTIAL_CONSTRAINTS               |
| RESOURCE_GROUPS                       |
| ROLE_COLUMN_GRANTS                    |
| ROLE_ROUTINE_GRANTS                   |
| ROLE_TABLE_GRANTS                     |
| ROUTINES                              |
| SCHEMA_PRIVILEGES                     |
| SCHEMATA                              |
| ST_GEOMETRY_COLUMNS                   |
| ST_SPATIAL_REFERENCE_SYSTEMS          |
| ST_UNITS_OF_MEASURE                   |
| STATISTICS                            |
| TABLE_CONSTRAINTS                     |
| TABLE_PRIVILEGES                      |
| TABLES                                |
| TABLESPACES                           |
| TRIGGERS                              |
| USER_PRIVILEGES                       |
| VIEW_ROUTINE_USAGE                    |
| VIEW_TABLE_USAGE                      |
| VIEWS                                 |
+---------------------------------------+
73 rows in set (0.01 sec)

3. List all data dictionary whose name have 'col' keyword in it.

=>  select * from information_schema.tables t where table_name like '%col%';
