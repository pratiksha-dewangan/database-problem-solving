DELIMITER //
Practice 1

•	Create a procedure called USER_QUERY_EMP that accepts three parameters. Parameter p_myeno is of IN parameter mode which provides the empno value. The other two parameters p_myjob and p_mysal are of OUT mode. The procedure retrieves the salary and job of an employee with the provided employee number and assigns those to the two OUT parameters respectively. The procedure should handle the error if the empno does not exist in the EMP table by displaying an appropriate message. Use bind variables for the two OUT Parameters.
•	Compile the code, invoke the procedure, and display the salary and job title for employee number 7839. Do the same for employee number 7123.
Solution:-
DROP PROCEDURE IF EXISTS USER_QUERY_EMP;
CREATE PROCEDURE USER_QUERY_EMP(p_myeno INT, OUT p_mysal FLOAT, OUT p_myjob VARCHAR(20))
BEGIN
IF NOT EXISTS(SELECT SAL,JOB FROM EMP WHERE EMPNO=p_myeno) THEN
SELECT 'ERROR! NO SUCH USER FOUND IN EMP TABLE' AS 'MSG';
ELSE
SELECT SAL,JOB INTO p_mysal, p_myjob FROM EMP WHERE EMPNO=p_myeno;
END IF;
END//                                  Output:-
+--------+
| @SAL   |
+--------+
| 100000 |
+--------+
+-------+
| @JOB  |
+-------+
| CLERK |
+-------+

Practice 2

•Create a function named USER_ANNUAL_COMP that has three parameters p_eno, p_sal and p_comm for passing on the values of an employee number, the current salary and commission of the employee respectively. The function calculates and returns the annual compensation of the employee by using the following formula.
     annual_compensation =  (p_sal+p_comm)*12
      If the salary or commission value is NULL then zero should be substituted for it. 
•Give a call to USER_ANNUAL_COMP from a SELECT statement, against the EMP table.
Solution:-DELIMITER //
DROP FUNCTION IF EXISTS USER_ANNUAL_COMP;
CREATE FUNCTION USER_ANNUAL_COMP(p_eno INT, p_sal FLOAT, p_comm FLOAT)
RETURNS FLOAT
BEGIN
DECLARE ANNUAL_COMM FLOAT;
IF p_sal IS NULL OR p_comm IS NULL THEN
SET ANNUAL_COMM=0.0;
ELSE
SET ANNUAL_COMM=(p_sal+p_comm)*12;
END IF;
RETURN ANNUAL_COMM;
END//
DELIMITER ;
Output:-
+----------------------------------+
| USER_ANNUAL_COMP(EMPNO,SAL,COMM) |
+----------------------------------+
|                          1320000 |
+----------------------------------+

Practice 3

•Create a function named USER_VALID_DEPTNO that has a single parameter p_dno to accept a department number and returns a BOOLEAN value. The function returns TRUE if the department number exists in the DEPT table else it returns FALSE.
•Create a procedure named SHOW_STRENGTH that accepts department number in a single parameter p_deptno from user. The procedure gives a call to USER_VALID_DEPTNO. If the function returns TRUE then the procedure finds out how many employees are there in the department from the EMP table and displays the same on the screen. If the function returns FALSE then the procedure displays an appropriate error message.
•Give call to SHOW_STRENGTH by passing on department number 10. Do the same for department number 76.
Solution:-DELIMITER //
DROP FUNCTION IF EXISTS USER_VALID_DEPTNO;
CREATE FUNCTION USER_VALID_DEPTNO(p_dno INT)
RETURNS BOOLEAN
BEGIN
IF NOT EXISTS (SELECT * FROM DEPT WHERE DEPTNO=p_dno) THEN
RETURN FALSE;
ELSE
RETURN TRUE;
END IF;
END//
DELIMITER ;
DELIMITER //
DROP PROCEDURE IF EXISTS SHOW_STRENGTH;
CREATE PROCEDURE SHOW_STRENGTH(p_deptno INT)
BEGIN
DECLARE IS_VALID INT DEFAULT 0;
SET IS_VALID=USER_VALID_DEPTNO(p_deptno);
IF IS_VALID THEN
SELECT COUNT(*) FROM EMP WHERE DEPTNO=p_deptno;
ELSE
SELECT 'ERROR! THIS DEPARTMENT DOES NOT EXIST!' AS 'ERROR';
END IF;
END //
DELIMITER ;
Output:-
mysql> CALL SHOW_STRENGTH(10);
+----------+
| COUNT(*) |
+----------+
|        3 |
+----------+

mysql> CALL SHOW_STRENGTH(76);
+----------------------------------------+
| ERROR                                  |
+----------------------------------------+
| ERROR! THIS DEPARTMENT DOES NOT EXIST! |
+----------------------------------------+

•Create a procedure named ADD_EMPLOYEE to hire an employee. Parameters to the procedure are job, mgr, hiredate, salary, commission and deptno. Validate the following:

a. Employee number is not taken as a parameter but is auto generated by using a SEQUENCE. 
b. Job is either ‘CLERK’ or ‘ANALYST’ or ‘SALESMAN’. The input value can be entered in any case (upper or lower or initcap).
c. Mgr is an existing employee.
d. Hiredate is less than system date.
e. Salary must be greater than 800
f. Commission is not null if the job is SALESMAN. For any other job, commission is null.
g. Deptno must exist in the DEPT table.
Insert the record if the above validations are met and display a message ‘1 row inserted’. If the row is not inserted generate an exception and handle it by displaying an appropriate message. 
•Give a call to ADD_EMPLOYEE through an anonymous PL/SQL block.
Solution:-DELIMITER //
DROP PROCEDURE IF EXISTS ADD_EMPLOYEE;
CREATE PROCEDURE ADD_EMPLOYEE(JOB VARCHAR(20),MGR INT,HIREDATE DATE,SAL FLOAT, COMM FLOAT, DEPTNO INT)
BEGIN
DECLARE ID INT;
DECLARE COMMISSION FLOAT;
DECLARE UPR_JOB VARCHAR(20);
SET UPR_JOB=UPPER(JOB); 
IF (UPR_JOB='CLERK' OR UPR_JOB='ANALYST' OR UPR_JOB='SALESMAN') THEN
IF EXISTS (SELECT EMPNO FROM EMP WHERE EMPNO=MGR) THEN
IF HIREDATE <= CURDATE() THEN
IF SAL > 800 THEN
IF UPR_JOB='SALESMAN' THEN
SET COMMISSION=COMM;
END IF;
SET ID=(SELECT EMPNO FROM EMP ORDER BY EMPNO DESC LIMIT 1);
INSERT INTO EMP VALUES(ID+1,NULL,UPR_JOB,MGR,HIREDATE,SAL,COMMISSION,DEPTNO);
ELSE
SELECT 'VALIDATION FAILED PLEASE CHECK ALL VALID CONDITIONS AE SATISFIED OR NOT' AS 'ER_MSG';
END IF;
ELSE
SELECT 'VALIDATION FAILED PLEASE CHECK ALL VALID CONDITIONS AE SATISFIED OR NOT' AS 'ER_MSG';
END IF;
ELSE
SELECT 'VALIDATION FAILED PLEASE CHECK ALL VALID CONDITIONS AE SATISFIED OR NOT' AS 'ER_MSG';
END IF;
ELSE
SELECT 'VALIDATION FAILED PLEASE CHECK ALL VALID CONDITIONS AE SATISFIED OR NOT' AS 'ER_MSG';
END IF; 
END //
DELIMITER ;
Output:-

mysql> CALL ADD_EMPLOYEE('CLERK',7698,'2021-07-27',10,100,50);
+-------------------------------------------------------------------------+
| ER_MSG                                                                  |
+-------------------------------------------------------------------------+
| VALIDATION FAILED PLEASE CHECK ALL VALID CONDITIONS AE SATISFIED OR NOT |
+-------------------------------------------------------------------------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> CALL ADD_EMPLOYEE('CLERK',7698,'2021-07-27',1000,100,50);
Query OK, 1 row affected (0.09 sec)

mysql> SELECT * FROM EMP;
+-------+--------+-----------+------+------------+------+------+--------+
| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL  | COMM | DEPTNO |
+-------+--------+-----------+------+------------+------+------+--------+
|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800 | NULL |     20 |
|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600 |  300 |     30 |
|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250 |  500 |     30 |
|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975 | NULL |     20 |
|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250 | 1400 |     30 |
|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850 | NULL |     30 |
|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450 | NULL |     10 |
|  7788 | SCOTT  | ANALYST   | 7566 | 1982-12-09 | 3000 | NULL |     20 |
|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000 | NULL |     10 |
|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500 |    0 |     30 |
|  7876 | ADAMS  | CLERK     | 7788 | 1983-01-12 | 1100 | NULL |     20 |
|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950 | NULL |     30 |
|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000 | NULL |     20 |
|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300 | NULL |     10 |
|  7935 | NULL   | SALESMAN  | 7698 | 2021-07-27 | 1000 |  100 |     50 |
|  7936 | NULL   | CLERK     | 7698 | 2021-07-27 | 1000 | NULL |     50 |
+-------+--------+-----------+------+------------+------+------+--------+









                                